# This is an auto generated Dockerfile for ros:desktop
# generated from docker_images_ros2/create_ros_image.Dockerfile.em
FROM ros:humble-ros-base-jammy

ENV DEBIAN_FRONTEND=noninteractive
# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES \
    ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics

# install ros2 packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-desktop=0.10.0-1* \
    && rm -rf /var/lib/apt/lists/*
#RUN apt-get install ros-humble-test-msgs \
#    && rm -rf /var/lib/apt/lists/*


RUN apt-get update && apt-get install -y mesa-utils && apt-get install -y gedit

RUN apt-get update && apt-get install -y lsb-release wget gnupg
RUN wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null
RUN apt-get update && apt-get install -y ignition-fortress
RUN apt-get install -y git
RUN apt-get install -y ros-humble-tf-transformations
RUN apt-get install -y python3-pip
RUN pip install transforms3d
RUN pip install pgm_reader
RUN pip install casadi
RUN pip install numba
RUN pip install control



#PIGPIO
RUN apt install -y python-setuptools python3-setuptools
RUN apt-get install -y python3-pip
RUN wget https://github.com/joan2937/pigpio/archive/master.zip
RUN unzip master.zip
RUN cd pigpio-master && make && make install
RUN apt install -y xsltproc

#FOR NAV2
RUN apt-get install -y libmagick++-dev
RUN apt install -y graphicsmagick-libmagick-dev-compat
RUN apt-get update
RUN apt install -y ros-humble-behaviortree-cpp-v3
RUN apt install -y ros-humble-navigation2 
RUN apt install -y ros-humble-nav2-bringup

# VISUALIZATION
RUN apt-get update
RUN apt install -y ros-humble-plotjuggler-ros

#CERES
## Install packages
#RUN apt-get update -q && \
#    apt-get install -y --fix-missing --no-install-recommends \
#    cmake \
#    libgoogle-glog-dev libgflags-dev \
#    libatlas-base-dev \
#    libeigen3-dev \
#    libsuitesparse-dev \
#    libmetis-dev

#RUN git clone --depth=1 https://ceres-solver.googlesource.com/ceres-solver && \
#    cd ceres-solver && \
#    mkdir build && \
#    cd build && \
#    cmake -DOPENMP=OFF \
#          -DCXX11=ON \
#          -DBUILD_DOCUMENTATION=ON \
#          .. && \
#    make -j3 && \
#    make test && \
#    make install

#PINOCCHIO
RUN apt install -qqy lsb-release gnupg2 curl
RUN echo "deb [arch=amd64] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release -cs) robotpkg" | tee /etc/apt/sources.list.d/robotpkg.list
RUN curl http://robotpkg.openrobots.org/packages/debian/robotpkg.key | apt-key add -
RUN apt-get update
RUN apt install -qqy robotpkg-py310-pinocchio
RUN echo 'export PATH=/opt/openrobots/bin:$PATH' >> /root/.bashrc
RUN echo 'export PKG_CONFIG_PATH=/opt/openrobots/lib/pkgconfig:$PKG_CONFIG_PATH' >> /root/.bashrc
RUN echo 'export LD_LIBRARY_PATH=/opt/openrobots/lib:$LD_LIBRARY_PATH' >> /root/.bashrc
RUN echo 'export PYTHONPATH=/opt/openrobots/lib/python3.10/site-packages:$PYTHONPATH' >> /root/.bashrc 
RUN echo 'export CMAKE_PREFIX_PATH=/opt/openrobots:$CMAKE_PREFIX_PATH' >> /root/.bashrc

#CROCODDYL
#RUN tee /etc/apt/sources.list.d/robotpkg.list <<EOF
#deb [arch=amd64] http://robotpkg.openrobots.org/wip/packages/debian/pub $(lsb_release -sc) robotpkg
#deb [arch=amd64] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release -sc) robotpkg 
#EOF
#RUN curl http://robotpkg.openrobots.org/packages/debian/robotpkg.key | apt-key add -
#RUN apt-get update
#RUN apt install robotpkg-py310-crocoddyl 
#RUN echo 'export PATH=/opt/openrobots/bin:$PATH' >> /root/.bashrc
#RUN echo 'export PKG_CONFIG_PATH=/opt/openrobots/lib/pkgconfig:$PKG_CONFIG_PATH' >> /root/.bashrc
#RUN echo 'export LD_LIBRARY_PATH=/opt/openrobots/lib:$LD_LIBRARY_PATH' >> /root/.bashrc
#RUN echo 'export PYTHONPATH=/opt/openrobots/lib/python3.10/site-packages:$PYTHONPATH' >> /root/.bashrc




#ACADOS
RUN git clone https://github.com/acados/acados.git
RUN cd acados && git submodule update --recursive --init
RUN cd acados && mkdir -p build
RUN cd acados/build && cmake -DACADOS_WITH_QPOASES=ON  -DACADOS_WITH_OSQP=ON ..
# add more optional arguments e.g. -DACADOS_WITH_OSQP=OFF/ON -DACADOS_INSTALL_DIR=<path_to_acados_installation_folder> above
RUN cd acados/build && make install -j4
#RUN cd acados/build && make shared_library
RUN pip install -e /acados/interfaces/acados_template
RUN echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:"/acados/lib"' >> /root/.bashrc
RUN echo 'export ACADOS_SOURCE_DIR="/acados"' >> /root/.bashrc


#JAX
RUN pip install --upgrade "jax[cuda]" -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html





#SHELL COLOR
SHELL ["/bin/bash", "-c"]
RUN echo 'export PS1="\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;37m\]\u\[\033[00m\]@\[\033[01;32m\]\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] "'  >> /root/.bashrc
RUN echo 'export COPPELIASIM_ROOT_DIR=/home/coppeliasim_simulation/CoppeliaSim' >> /root/.bashrc
RUN echo '. /home/ros2_ws/install/setup.bash' >> /root/.bashrc

RUN echo 'alias rviz2="ros2 run rviz2 rviz2 -d /home/ros2_ws/src/utilities/rviz_config/common.rviz"' >> /root/.bashrc
RUN echo 'alias coppelia="cd /home/coppeliasim_simulation/CoppeliaSim && ./coppeliaSim.sh ../self_balancing_robot.ttt"' >> /root/.bashrc



WORKDIR /home
RUN source /root/.bashrc




